{
  "name": "node-gpsd",
  "description": "Node.js gpsd client for GPS tracking device.",
  "version": "0.2.0",
  "keywords": [
    "gps",
    "gpsd",
    "location",
    "tracking",
    "position"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/eelcocramer/node-gpsd.git"
  },
  "homepage": "http://github.com/eelcocramer/node-gpsd.git",
  "bugs": {
    "url": "http://github.com/eelcocramer/node-gpsd/issues"
  },
  "main": "./lib/gpsd",
  "engines": {
    "node": ">=v0.8.0"
  },
  "dependencies": {},
  "devDependencies": {},
  "contributors": [
    {
      "name": "Eelco Cramer"
    },
    {
      "name": "Pascal Deschenes"
    },
    {
      "name": "Jeffrey Yang"
    }
  ],
  "maintainers": [
    {
      "name": "Eelco Cramer",
      "email": "eelco@servicelab.org",
      "url": "http://www.servicelab.org"
    }
  ],
  "licences": [
    {
      "type": "Apache"
    }
  ],
  "readme": "# node-gpsd\n\nInterface to [gpsd](http://www.catb.org/gpsd/).\n\n## Installation\n\nWith package manager [npm](http://npmjs.org/):\n\n\tnpm install node-gpsd\n\n## Code instructions\n\nRequire `node-gpsd` by calling:\n\n    var gpsd = require('node-gpsd');\n    \n`node-gpsd` has 2 classes: `Daemon` and `Listener`.\n\nThe `Daemon` is a wrapper to start and stop `gpsd` from your program. The `Listener` interfaces with a running `gpsd` (not necessarily instantiated via the `Daemon` class).\n\n#### Deamon\n\nA `Daemon` is instantiated by calling:\n\n\tvar daemon = new gpsd.Daemon({\n        program: 'gpsd',\n    \tdevice: '/dev/ttyUSB0',\n    \tport: 2947,\n    \tpid: '/tmp/gpsd.pid',\n    \tlogger: { \n            info: function() {}, \n            warn: console.warn, \n            error: console.error \n        }\n\t});\n\nThe options that are listed above are the default values so calling `new gpsd.Daemon()` will have the same effect. Change the options according your own setup.\n\nThe `Daemon` can be started and stopped by calling the appropriate methods:\n\n\tdaemon.start(function() {\n\t\tconsole.log('Started');\n\t});\n\nor:\n\n\tdaemon.stop(function() {\n\t\tconsole.log('Stopped');\n\t});\n\nThe `Daemon` can log to the console if needed. Logging can be controlled by passing a `logger` property in the options when creating the `Daemon` or by setting the logger field:\n\n\tdaemon.logger = new (winston.Logger) ({ exitOnError: false });\n\nThe `Daemon` is an [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter) and will emit the following events:\n\n* `died`: when the `Daemon` is killed.\n\n#### Listener\n\nA `Listener` is instantiated by calling:\n\n\tvar listener = new gpsd.Listener({\n    \tport: 2947,\n    \thostname: 'localhost',\n        logger:  { \n            info: function() {}, \n            warn: console.warn, \n            error: console.error \n        }\n\t});\n\nThe options that are listed above are the default values so calling `new gpsd.Listener()` will have the same effect. Change the options according your own setup.\n\nThe `Listener` can be connected to the `gpsd` by calling:\n\n\tlistener.connect(function() {\n\t\tconsole.log('Connected');\n\t});\n\nand disconnected by calling:\n\n\tlistener.disconnect(function() {\n\t\tconsole.log('Disconnected');\n\t});\n\nThe connection state can be queries by calling:\n\n\tlistener.isConnected();\n\t\nTo control watching gps events call the methods:\n\n\tlistener.watch();\n\tlistener.unwatch();\n\t\nThis will put the `Listener` in and out-of watching mode. The `Listener` is an [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter) and will emit the following events:\n\n* `gpsd` events like described in the [gpsd documentation](http://www.catb.org/gpsd/gpsd_json.html). All `gpsd` events like: `TPV`, `SKY`, `INFO` and `DEVICE` can be emitted. To receive all `TPV` events just add `listener.on('TPV', function(tpvData))` to your code.\n* `error` when data in a bad format is received from `gpsd`.\n* `disconnected` when the connection with `gpsd` is lost.\n* `connected` when the connection with `gpsd` is established.\n* `error.connection` when the connection is refused.\n* `error.socket` on other connection errors.\n\nIt is possible to query the gps device by calling:\n\n\tlistener.version(); /* a INFO event will be emitted */\n\tlistener.devices(); /* a DEVICES event will be emitted */\n\tlistener.device(); /* a DEVICE event will be emitted */\n\t\nThe `Listener` can log to the console if needed. Logging can be controlled by passing a `logger` property in the options when creating the `Listener` or by setting the logger field:\n\n\tlistener.logger = new (winston.Logger) ({ exitOnError: false });;\n\n## Shout outs\n\nShout outs go to [Pascal Deschenes](http://github.com/pdeschen) for creating the [Bancroft](http://github.com/pdeschen/bancroft) project that formed the basis for `node-gpsd`.\n",
  "readmeFilename": "README.markdown",
  "_id": "node-gpsd@0.2.0",
  "_shasum": "1ecd1dd8cca4626b4e6473b0a63690a3e033bfd0",
  "_from": "node-gpsd@",
  "_resolved": "https://registry.npmjs.org/node-gpsd/-/node-gpsd-0.2.0.tgz"
}
